				Java
.What is Oops? 
	OOPS is Object Oriented Programming Structure. 
	OOPS is a method of implementation in which programs are organised as collection of objects, class and methods.
---

.What are the coding Standards used in java? 
	Pascal notation: Every word's first letter ,must be a capital letter 
		-->class,project name 
	Camel notation: First word's first letter should be a small letter, all the other succeeding word's first letter should be a capital letter.  
 		-->method,object,variable
---

.Datatypes used in java? 
	*byte *short *int *long *float *double *boolean *char *String
---

.What is mean by Wrapper class? 
	Classes of data types is called wrapper class. 
	It is used to convert any data type into an object. 
	All classes and wrapper classes default value is null. 
---

.Class,Method,Object? 
	Class: Class is a collection of objects and methods Class contains attributes(variables and methods) that are common to all the objects created in a class. 
		 •ChromeDriver •FireFoxDriver •InternetExplorerDriver •Actions •Robot •Select 

	Method: Method defines the set of actions to be performed.
		•get() •getTitle() •getCurrentUrl() •getText() •getAttribute() 

	Object: Object is the run time memory allocation. Using object we call any methods.
---

.Encapsulations: 
	*It is the structure of creating folders. 	
	*It wraps the data and code acting on data together in to a single unit. 
		*Example of encapsulation is POJO class. 
	*It is otherwise called Data hiding. 

	In my project I used to maintain all the locators in the POJO class as object repository and using the object indirectly I will access the locators in the different class using POM with page factory concept. 
---

.Inheritance: 
	*Accessing one class property in to another class using extend keyword is Inheritance. 
	*It ensures code reusability.. 
	*In my Project I used to maintain all the reusable methods in baseclass and using extends keyword I will access all the methods when required. 
		Types:
			• Single – One parent class directly support one child class using extend keyword. 
			• Multilevel – More than one parent class directly support one child class using extend. 
			• Multiple – More than one parent class parallelly support one child class. But it won’t support in java due to priority problem but we can 					achieve it using Interface. 
			• Hierarchal – One parent class support more than one child class. 
			• Hybrid – Combination of single and multiple inheritances. 
---

.Mean by polymorphism? 
	>Poly-many. 
	>Morphism-forms. 
		Taking more than one forms is called polymorphism or one task implemented in many ways. 
*Types: 
	-> Method Overloading (or) Static Binding (or) Compile time polymorphism 
		Method overloading is if the same method is going to overload again and again with differentarguments. In my project I have used method overloading 		  concepts like println(), sendkeys(), waits(), etc.

	-> Method Overriding (or) Dynamic Binding (or) Run time polymorphism
		Changing business logic from super class in to subclass using the same method name is method overriding. In my project I have implemented method 		  overriding concepts like 
			•TakeScreenShot – getScreenShotAs() 
			•IRetryAnalyzer – retry() 
			•IAnnotationTransformer – transform() 
---

.Singleton Class:  
	It’s a class that can have only one object (an instance of the class) at a time.
---

.What is mean by access specifier? 
	It defines the scope or level of access for variables,methods and classes.

.Access Specifier: 
	•Public – It’s a global level Access Specifier. When we use public as access Specifier, we can access in same package as well as different package by using 		  object and extends. 
	•Protected – When we use Protected as Access Specifier, we can access by using object and extends in the same package and we can access using extends in 		  different package. 
	•Default – It’s a package level Access Specifier. We can access by using object and extends when it comes to same package. 
	•Private – It’s a class level Access Specifier. We can use it only in a class. 
---

.Access Modifier: 
	•Static – It can be declared at method and variable level only. If we declare as Static, we can call using method name and variable name without creating 		 	object. 
	•Abstract – It can be declared at class and method level only. If we declare class as abstract, we can’t create object and if we declare method as abstract, we 		can’t write business logics. 
	•Final – It can be declared at class, method and variable level. If we declare class as final, we can’t inherit. If we declare method as final, we can’t 		override. If we declare variable as final, we can’t change the value. 
---

.What is meant by String? 
	* Collection of characters or words enclosed within double quotes is called as String. String is a class in java 
	* String is index based 
---

.Method available in string? 
	equals(); equalsignorecase(); contains(); split(); toUpperCase(); toLowerCase(); subString(); isEmpty(); identifyHashCode(); startsWith(); endsWit(); CompareTo(); charAt(); indexOf(); lastIndexOf(); replace(); 
---

.Types of String?: 
	•Literal String 	– Stored inside the heap memory. Duplicates will be stored in the same memory. 
	•Non Literal String 	– Stored in the heap memory. Duplicated will be stored in different memory. 
	•Immutable String 	– Stored inside the heap memory. To join two strings we use “concat”. All Strings share same memory. 
	•Mutable String		– Stored in the heap memory. To join two strings we use “append”. First String and Concated String shares the same memory address. 
---

.String Buffer
	* All Method are synchronized
	* It is Thread Safe
	* Used in Multi-Threaded Environment

String Builder
	* Is not synchronized
	* Not thread Safe
	* Used in Single Threaded Environment
---

.Constructor
    	* Where ever create object it automatically invoked the defalut constructor
	* Class Name & ConstructorName sholud be same 
	* Constructor doesnt have any return type  

  Types: 
	• Default Constructor (or) Non Parameterized Constructor. 
	• Argument Based (or) Parameterized Constructor. 

  Constructor Chaining
	* To call one constructor to another Constructor is called Constructor chaining
	* Reduce object creation
		this (): It’s used for constructor chaining. 
		Super (): It’s used to call the parent class constructor.
---

.Array? 
	* It’s used to store multiple values of similar data type in a single reference name. 
	* The values are stored based on Index.
	* It allows duplicate values. 
	* Memory waste will be high since memory will be allocated at compile time. 
		Syntax: example: int refName[] = new int[size]; 
---

.Collection?
	1.Storing multiple values of dis-similer datatypes in a single refName
	2.memory wastage is low due to memory is allocated at run time

Collection:I(super interface)
=============================
  List (sub interface)
  Set  (sub interface)
  Map  (sub interface)

List:I
------
	* List is pre-defined interface which is present in java.util package 
	* List is an index based
	* List allows duplicate
	* List prints in insertion order    

Types of List (OR) Classes of List: 
	1.ArrayList  - ArrayList is Asynchronous and Non Thread Safe
	2.LinkedList
	3.Vector     - VectorList is Synchronous and Thread Safe. 

Set:I
-----
	* Set is predefined interface which is present in java.util package
	* Set is value based one
	* Set doesn't allow duplicate values
	* Order of Set is based on class which we implemented

Types of Set (or)Classes of Set
	1.HashSet--random
	2.LinkedHashSet--insertion
	3.TreeSet--ascending order

Map:I
-----
	* Map is a Predefined Interface it is present in java.util
	* key,value pair combination  
	* key does not allow duplicates
	* values allow duplicates

Types of map
	1.HashMap----Random
	2.LinkedHashMap----Insertion
	3.TreeMap----Ascending order
	4.HashTable----------Random
---

.Difference between hashtable and hashmap

Hashmap
	* Asynchronize--->Allows users parallely
	* key=1 null values= n null
	* non thread safe

HashTable
	* synchronize---->Allows users one by one
	* ignore null values in key and values.
	* thread safe 
---

.Methods of Map
	size(); put(); get(key); values(); keySet(); remove(); clear(); containsKey(); containsValue(); getKey(); getValues(); entrySet()
---

.Methods of List
	size(); get(); add(); remove(); set(); indexOf(); lastIndexOf(); addAll(); retainAll(); removeAll()
---

.What are the types of variable?
	* Static Variable	- It is shared by all the objects in the class.  
	* Local Variable	- A variable declared inside a method/block.Level of access:only inside the block
	* Final variable	- A variable declared outside all methods but inside class. Level of access is only with in object..... 
---

.Exception
	It’s like an error. Whenever it occurs the program will terminate itself
  •Types: 
	> Checked Exception(Compile Time Exception) 
		FileNotFound Exception 
		IONotFound Exception 
		SQLNotFound Exception 
		ClassNotFound Exception 
	> Unchecked Exception (Run Time Exception) 
		Arithmetic Exception 
		NullPointer Exception 
		IndexOutOfBound Exception 
		ArrayIndexOutOfBound Exception 
		StringIndexOutOfBound Exception 
---

.Exception handled
	Try – contains error message. 
	Catch – contains solution for the error. 
	Finally – prints the output in both cases (error and no error). 
	Throw – handle only one exception which is mentioned inside method. 
	Throws – handles multiple exceptions which is mentioned in the method level.
---
  
.Differentiate between instance and local variables. 
	For instance, variables are declared inside a class and local variable can be anywhere inside a method or a specific block of code. 

---

.Can we overload a static method? 
	Yes, we can overload static methods in Java. Method overloading in Java allows us to have multiple methods with the same name in a class, but they must have different parameter lists. 
---
 
.Can we overload a main method? 
	Yes, the main method can be overloaded as many times as we want. JVM prefers to call the main method with the help of its predefined calling method. 
---
 
.Can we override a static method? 
	No, static methods cannot be overridden in Java. 
--- 

.Can we override the overloaded method? 
	Yes, we can override an overloaded method. 
--- 

.What is a Thread? 
	The flow of execution is called Thread. Every java program has at least one thread called the main thread, the main thread is created by JVM. 
---

.What is multithreading? 
	Multithreading is a process of executing multiple threads simultaneously. Multithreading is used to obtain the multitasking. It consumes less memory and gives the fast and efficient performance. 
--- 
 
.Difference between serialization and deserialization: 
	Serialization is a mechanism of converting the state of an object into a byte stream. 
	Deserialization is the reverse process where the byte stream is used to recreate the actual Java object in memory.
---

.Main use of Scanner class? 
	To get the inputs from the user at the run time. 
---

.Methods available in Scanner Class? 
	*nextByte(); *nextShort(); *nextInt(); *nextLong(); *nextFloat(); *nextDouble(); *next().charAt(0); *next(); *nextLine(); *nextBoolean(); 
---
============================================================================================================================================================














































=================================================================================
					Junit
What is JUnit?
	JUnit is a unit testing framework for Java used to write and run repeatable tests.
---
How does jUNit Work?
	verifies Assertion & reports Results
=================================================================================
					Cucumber
What is Cucumber?
	It is a software Testing tools used to write & run testcases based of Bdd
---
Purpose or Benefites of cucumber?
	Collabration friendly, Non-coders can easily Understand)		
---
How do you execute cucumber test?
	Using testrunner class, with help of @Runwith & @CucumberOptions run the testscenerio and also generate JVM reports
---
Purpose of hooks?
	It allows method of code before or after every scenario 
---
What is step definition in cucumber?
	* It maps Gherkin steps (like Given, When, Then) to code implementation.
	* When Cucumber runs a scenario, it looks for a matching step definition and executes the connected method.	
---
How to share data between steps in cucumber?
	* Use instance variables in the same class to share simple data.
	* Apply Dependency Injection (e.g. PicoContainer) for scalable sharing across classes.
---
Basic Requirements to run cucumber TestCase ?
	* JDK & JRE
(or)
	* To run Cucumber tests, install the JDK, and configure Maven/Gradle for dependencies. Write feature files in Gherkin syntax and map them to Java step definitions. Create a test runner class with @RunWith(Cucumber.class) and run it in IDE or command line
===============================================================================================================================
					TestNG
Cross Browser Testing?
	* To run Webapplication or website on multiple browser to ensure compatibility and functionality
(Or)
	* Cross Browser Testing is a quality assurance process that ensures your website or web application works consistently across different browsers, devices, and operating systems
---
Parallel Execution?
	* Parallel Execution is a technique used in software testing to run multiple tests or tasks simultaneously, one after the other. This speeds up the testing process and improves efficiency.
---
listeners?
----
.IRetryAnalyzer?
	IRetryAnalyzer is a TestNG interface that lets you automatically retry failed tests-that fail due to network glitches, timing issues, or other intermittent problems.
=======================================================================================================================================================
					API
Api 
	it is a set of action, allows one software system to communicate with another software system 
---
Input Validation?
	Process of verifying data received from client is accurate, complete, and conforms to expected standards
---
Api documentation?
	API documentation is a developer guide that explains how to interact with an API. It includes details like endpoints, request methods (GET, POST, etc.), input parameters, response formats, authentication steps, and error codes
---
Synchronous & Asynchronous?
	🧭 Synchronous API
		`The client waits for the server to respond before continuing.
		`Like a phone call: you ask, then wait for an answer.
		`Best for real-time tasks like login, payment, or data retrieval.
	⚡ Asynchronous API
		`The client doesn’t wait—it sends a request and moves on.
		`Like sending an email: you don’t wait by the inbox.
		`Ideal for long-running tasks like video processing or bulk uploads.
---
Rare limiting?
	Technique used to control the amount of incoming request to  an api 
---
Types of api?
	`Open/Public APIs	: Available to anyone. Great for third-party developers (e.g., Google Maps API).
	`Internal/Private APIs	: Used only within an organization to connect internal systems.
	`Partner APIs		: Shared with specific external partners under strict access controls.
	`Composite APIs		: Allow multiple endpoints to be accessed in a single cell
---
REST?
	` Representational State Transfer
	` Each request from client comtains all the information needed to process it.
	` Uses HTTP methods
---
RESTFUL API?
	A RESTful API is a web service that follows REST principles, using standard HTTP methods to interact with resources
---
SOAP?
	` SOAP stands for Simple Object Access Protocol 
	` it's a protocol used to exchange structured information in webservice 
---
Rest & SOAP?
	🔧 `REST is simple and flexible. 
	   `light weight,uses standard HTTP Methods

	🛡️ `SOAP is secure and structured.
	   `It is Protocol based & relies on XML
---
HTTP Methods?
	`GET	: Retrieve data from server	
	`POST	: Send data to server	
	`PUT	: Update entire resource	 
	`PATCH	: Update part of a resource	
	`DELETE : Remove a resource
---
Commonly used tool for Api?
	Postman, SoapUI, Swagger, Jmeter, RestAssured
---
RestAssured ?
	It is a popular Java-based library used for automated testing of RESTful APIs.
---
RestAssured Can Do
	` Send GET, POST, PUT, DELETE requests easily.
	` Validate status codes, headers, and response bodies.
	` Handle authentication, cookies, and query parameters.
	` Integrate with JUnit or TestNG for test automation.
	` Support JSON and XML response parsing
---
Versioning in api?
	` It's a way to update APIs without breaking old versions.
	` It can be done with URL path, query parameters, or headers.
---
.CORS?
	` Cross-Origin Resource Sharing
	` It is a Security feature that allow or restric request from another domain
---
Webhooks?
	User defined HTTP callback,that triggered by specific events allowing realtime data updates	
(or)
	` Webhooks let one app notify another when an event occurs—automatically and instantly.
	` Instead of polling, they push data in real time via HTTP POST requests.
	` Commonly used for payments, alerts, or syncing data across systems.
---
MockAPI (Similr to stubs)?
	` MockAPI lets you create fake RESTful APIs to test and develop apps without a real server.
	` It supports HTTP methods and generates realistic mock data
---
PreRequest?
	Set of actions to be performed before request 
---
URI & URL?
	🌐URI (Uniform Resource Identifier)
		` A string that identifies a resource by name, location, or both.
		` Can be a URL, a URN, or any identifier.
		` Example: urn:isbn:0-486-27557-4 (identifies a book, not its location)

	🌐 URL (Uniform Resource Locator)
		` A type of URI that specifically gives the location of a resource.
		` Includes protocol (like http, ftp) and path.
		` Example: https://example.com/page.html (tells where and how to access it)
---
PathParameter & Query Parameter?
	🔹 Path Parameter
		` Part of the URL path (e.g., /users/123)
		` Used to identify specific resources
		` Required for the endpoint to work

	🔸 Query Parameter
		` key-value pair added after end of URL (e.g., ?sort=price)
		` Used for filtering the result of request, sorting, or optional data
		` Optional and flexible
---
Types od authorisation?
	` API Key		: A secret code you use to access a service.
	` Bearer token		: A special ticket that proves you're allowed in.
	` Basic Autentication 	: You give your username and password to log in.
	` Oauth			: A smart way to sign in using another trusted service (like Google)
---
Serialization & Deserialization in APi?
	` Serialization 	: Changing data (like an object) into a format (like JSON)
	` Deserialization	: Changing format (like JSON) into a data (like an object) 
---
Json , json path, json object, json array?
	` JSON		: A format used by APIs to send and receive data clearly.
	` JSON Object	: Contains data as key-value pairs inside {}—like a person's info.
	` JSON Array	: A list of items inside []—like a bunch of users or messages.
	` JSON Path	: A way to find specific data inside a JSON response—like a search shortcut.
---
Webservice & Api Testing?
	🧪 Web Service Testing
		` Tests how well a web service (like SOAP or REST) communicates between systems.
		` Checks if the service responds correctly with valid input and handles errors.
	🔍 API Testing
		` Focuses on testing APIs directly—without using a UI.
		` Verifies endpoints, data formats (like JSON or XML), status codes, authentication, and business logic.
		` Common tools: Postman, SoapUI, Rest Assured.
	* Both help ensure smooth communication and data exchange in software.
---
Client-Server Architecture?
	` Client	: A device or app (like a browser or mobile app) that requests data or services.
	` Server	: A powerful system that processes those requests and sends back the needed data.
	` How it works	: The client sends a request → the server processes it → the server sends a response.
---
Request & Response in API?
	` A Request is sent by the client to ask the server for data or to perform an action.
	` A Response is sent by the server back to the client with data and a status code.
	` APIs use this back-and-forth to exchange information smoothly.
---
JSON & XML?
	* JSON (JavaScript Object Notation)
		` JSON is light, fast, and commonly used in modern APIs.
		` JSON uses key-value pairs{} and arrays[] 
		` JSON is easier to read and write

	* XML (eXtensible Markup Language)
		` XML is more detailed and used in older systems or SOAP APIs
		` XML uses <tags> like HTML for structure
		` XML is more formal and flexible.
---
CRUD?
	C — Create : Add new data using the POST method 
	R — Read   : Fetch data using the GET method 
	U — Update : Change existing data using PUT or PATCH 
	D — Delete : Remove data using the DELETE method 
---
Authorization & Authentication in APIs
	` Authentication confirms who you are — like logging in.
	` Authorization controls what you're allowed to do — like which actions or data you can access.
---
API headers?
	` API headers send extra info along with HTTP requests/responses.
	` Common ones include Authorization (for tokens), Content-Type, and Accept.
	` They help handle authentication, format of data, and client-server communication.
---
Payload?
	a payload is the actual data sent in a request or received in a response — like the contents of a package 📦.
		` In a request, it's the info you send to the server (e.g. user details in JSON).
		` In a response, it's the data the server sends back (e.g. search results).
		` It’s usually found in the body of HTTP messages and formatted as JSON, XML, etc.
---
Types of Payload?
	` JSON		: Lightweight and human-readable, great for modern APIs.
	` XML		: Structured and verbose, often used in older systems.
	` Form Data	: Key-value pairs sent from forms, common for file uploads.
	` Binary Files	: Used for sending images, videos, or other media.
	` Plain Text	: Simple unformatted text — minimal and direct.
	` GraphQL	: Flexible query structure for retrieving exactly the data you need.

---
Status code for POST ?
	✅ Success Codes
		200 OK
		201 Created
		202 Accepted
		204 No Content
	❌ Error Codes
		400 Bad Request
		401 Unauthorized
		403 Forbidden
		422 Unprocessable Entity
---
Status code in API?
	ℹ️ Informational responses
		100 - Continue
	✅ Success Codes
		200 - OK
		201 - Created
		202 - Accepted
		203 - Non-Authoritative Information
		204 - No Content
	🔁 Redirection
		301 - Moved Permanently
		302 - Found
	⚠️ Client Error Codes
		400 - Bad Request 
		401 - Unauthorized
		403 - Forbidden * 
		404 - Not Found 
		405 - Method Not Allowed
		415 - Unsupported Media Type
		429 - Too Many Requests 
		422 - Unprocessable Entity
	💥 Server Error Codes
		500 - Internal Server Error
		501 - Not Implemented
		502 - Bad Gateway 
		503 - Service Unavailable 
		504 - Gateway Timeout
		505 - HTTP Version Not Supported
---
Types of Variable?
	🌍 Global	: Works in every request—good for common values like API keys.
	🌱 Environment	: Changes with different setups (like dev or live servers).
	📦 Collection	: Used for related requests grouped together.
	🧪 Local		: Used only in one place, for short-term use.
	📂 Data		: Comes from files—useful for testing many inputs quickly.
---
JWT ?
	JWT stands for JSON Web Token
	🔐 JWT is a compact token used for user authentication and secure data exchange.
		It has 3 parts: Header, Payload (with user data), and Signature.
	✅ After login, the server sends a token to the client, which is then sent in requests via the Authorization header.
		The server verifies the token to allow or deny access — no session storage needed!
---
What is JSON, JSONPath, JSONObject and JSONArray? 
	•JSON (JavaScript Object Notation) is used for representing structured data in API responses for transmitting data between the client and server in RESTful 	  APIs. 
	•JSONPath is a query language used for navigating and extracting specific elements or data from JSON document 
	•JSONObject is an object representation of JSON data, where data is stored as key-value pairs. 
	•JSONArray is a data structure used to represent an array (or list) of values in JSON. It can hold multiple elements, which can be of any data type, including 	  other JSON objects or arrays. 
---
Difference Between Serialization and Deserialization 
	•Serialization is the process of converting an object into a data format (byte stream, JSON, XML). 
	•Deserialization is the process of converting serialized data back into an object. 
---
What is Webservices and API Testing? 
	•Web Services Testing focuses on testing services that communicate over a network, such as SOAP or REST. It focuses on testing communication between client and 	  server using web protocols. 
	•API Testing focuses on testing any kind of API (including web services, database APIs, etc.). It focuses on testing any system-level API, including non-web-  	  based APIs. 

---------------------------------------------------------------------------------------------------------------------------
				Postman

.What is Postman?
	` It is an api testing tool 
	` used to hit the http request in backEnd

.Whats is collection?
	A group of API requests that can be executed together

.how to run a collection ?

======================================================================================================================================================
